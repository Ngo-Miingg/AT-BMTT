from flask import Flask, render_template, request, send_file
from Crypto.Cipher import AES # Thay th·∫ø pyDes b·∫±ng AES t·ª´ pycryptodome
import os
from werkzeug.utils import secure_filename

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng Flask
app = Flask(__name__)

# T·∫°o th∆∞ m·ª•c ƒë·ªÉ l∆∞u file t·∫£i l√™n v√† k·∫øt qu·∫£
UPLOAD_FOLDER = 'uploads'
RESULT_FOLDER = 'results'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)

@app.route('/')
def index():
    # Trang ch·ªß hi·ªÉn th·ªã giao di·ªán ng∆∞·ªùi d√πng
    return render_template('index.html')

@app.route('/process', methods=['POST'])
def process_file():
    # Nh·∫≠n file v√† kh√≥a t·ª´ form
    file = request.files['file']
    key_input = request.form['key']
    mode = request.form['mode']

    if not file:
        return "‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt file!"
    if not key_input:
        return "‚ö†Ô∏è Vui l√≤ng nh·∫≠p kh√≥a!"

    # ƒê·∫£m b·∫£o t√™n file an to√†n v√† l∆∞u v√†o th∆∞ m·ª•c upload
    filename = secure_filename(file.filename)
    filepath = os.path.join(UPLOAD_FOLDER, filename)
    file.save(filepath)

    # ƒê·ªçc d·ªØ li·ªáu t·ª´ file
    with open(filepath, 'rb') as f:
        data = f.read()

    # CHU·∫®N H√ìA KH√ìA CHO AES-128:
    # AES-128 y√™u c·∫ßu kh√≥a ƒë√∫ng 16 byte.
    # M√£ h√≥a chu·ªói kh√≥a sang bytes (UTF-8), sau ƒë√≥ ƒë·ªám b·∫±ng byte 0 ho·∫∑c c·∫Øt b·ªõt.
    key_bytes = key_input.encode('utf-8')
    aes_key = (key_bytes + b'\0' * AES.block_size)[:AES.block_size] # AES.block_size th∆∞·ªùng l√† 16
    print("Kh√≥a AES s·ª≠ d·ª•ng (sau chu·∫©n h√≥a, 16 bytes):", aes_key)

    # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng AES v·ªõi kh√≥a tr√™n, ch·∫ø ƒë·ªô ECB
    # CH√ö √ù: Ch·∫ø ƒë·ªô ECB kh√¥ng an to√†n cho h·∫ßu h·∫øt c√°c ·ª©ng d·ª•ng.
    # C√¢n nh·∫Øc s·ª≠ d·ª•ng AES.MODE_CBC ho·∫∑c AES.MODE_CTR v·ªõi IV ng·∫´u nhi√™n cho b·∫£o m·∫≠t t·ªët h∆°n.
    cipher = AES.new(aes_key, AES.MODE_ECB)

    # Ti·∫øn h√†nh m√£ h√≥a ho·∫∑c gi·∫£i m√£
    if mode == 'encrypt':
        # Zero-padding d·ªØ li·ªáu ƒë·ªÉ l√† b·ªôi s·ªë c·ªßa k√≠ch th∆∞·ªõc kh·ªëi AES (16 bytes)
        # Logic padding n√†y m√¥ ph·ªèng c√°ch AES-encrypt.cpp x·ª≠ l√Ω
        original_len = len(data)
        padded_message_len = original_len
        if original_len == 0: # N·∫øu file r·ªóng, C++ code ƒë·ªám th√†nh 1 kh·ªëi
            padded_message_len = AES.block_size
        elif (padded_message_len % AES.block_size) != 0:
            padded_message_len = (padded_message_len // AES.block_size + 1) * AES.block_size

        # T·∫°o buffer v·ªõi byte 0 v√† ch√©p d·ªØ li·ªáu g·ªëc v√†o
        # bytearray t·ª± ƒë·ªông kh·ªüi t·∫°o b·∫±ng byte 0 n·∫øu kh√¥ng c√≥ ƒë·ªëi s·ªë kh·ªüi t·∫°o gi√° tr·ªã
        padded_data_arr = bytearray(padded_message_len)
        padded_data_arr[:original_len] = data
        padded_data = bytes(padded_data_arr)

        processed_data = cipher.encrypt(padded_data)
        result_filename = 'encrypted_AES_' + filename
        print("üì¶ ƒê√£ m√£ h√≥a AES th√†nh c√¥ng.")
    else: # mode == 'decrypt'
        # D·ªØ li·ªáu c·∫ßn gi·∫£i m√£ ph·∫£i l√† b·ªôi s·ªë c·ªßa k√≠ch th∆∞·ªõc kh·ªëi
        if len(data) % AES.block_size != 0:
            print(f"‚ùå L·ªói gi·∫£i m√£: ƒê·ªô d√†i d·ªØ li·ªáu ({len(data)}) kh√¥ng ph·∫£i l√† b·ªôi s·ªë c·ªßa k√≠ch th∆∞·ªõc kh·ªëi ({AES.block_size}).")
            return "‚ö†Ô∏è Gi·∫£i m√£ th·∫•t b·∫°i. D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (k√≠ch th∆∞·ªõc kh√¥ng ƒë√∫ng)."
        try:
            processed_data = cipher.decrypt(data)
            # L∆∞u √Ω: V·ªõi zero-padding, kh√¥ng th·ªÉ lo·∫°i b·ªè padding m·ªôt c√°ch ƒë√°ng tin c·∫≠y
            # n·∫øu d·ªØ li·ªáu g·ªëc c√≥ th·ªÉ ch·ª©a byte 0 ·ªü cu·ªëi.
            # File gi·∫£i m√£ s·∫Ω ch·ª©a c√°c byte 0 ƒë·ªám th√™m (n·∫øu c√≥).
            # B·∫°n c√≥ th·ªÉ th·ª≠: processed_data = processed_data.rstrip(b'\0')
            # nh∆∞ng ƒëi·ªÅu n√†y s·∫Ω x√≥a c·∫£ c√°c byte 0 h·ª£p l·ªá ·ªü cu·ªëi d·ªØ li·ªáu g·ªëc.
            print("üîì ƒê√£ gi·∫£i m√£ AES th√†nh c√¥ng.")
        except Exception as e:
            print("‚ùå L·ªói gi·∫£i m√£ AES:", str(e))
            return "‚ö†Ô∏è Gi·∫£i m√£ th·∫•t b·∫°i. C√≥ th·ªÉ do kh√≥a sai ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá."
        result_filename = 'decrypted_AES_' + filename

    # Ghi d·ªØ li·ªáu k·∫øt qu·∫£ ra file
    result_path = os.path.join(RESULT_FOLDER, result_filename)
    with open(result_path, 'wb') as f:
        f.write(processed_data)

    # G·ª≠i file k·∫øt qu·∫£ cho ng∆∞·ªùi d√πng t·∫£i v·ªÅ
    return send_file(result_path, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)